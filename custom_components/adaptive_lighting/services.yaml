apply:
  description: Applies the current Adaptive Lighting settings to lights.
  fields:
    entity_id:
      description: "Entity ID of the switch. \U0001F4DD"
      selector:
        entity:
          integration: adaptive_lighting
          domain: switch
          multiple: false
    lights:
      description: "List of light entities to be controlled by Adaptive Lighting (may be empty). \U0001F31F"
      selector:
        entity:
          domain: light
          multiple: true
    transition:
      description: "Duration of transition when lights change, in seconds. \U0001F551"
      example: 10
      selector:
        text: null
    adapt_brightness:
      description: "Whether to adapt the brightness of the light. \U0001F31E"
      example: true
      selector:
        boolean: null
    adapt_color:
      description: "Whether to adapt the color of the light. \U0001F308"
      example: true
      selector:
        boolean: null
    prefer_rgb_color:
      description: "Use RGB color adjustment instead of native light color temperature. \U0001F308"
      example: false
      selector:
        boolean: null
    turn_on_lights:
      description: "Whether to turn on lights if they are off. \U0001F506"
      example: false
      selector:
        boolean: null
set_manual_control:
  description: Mark whether a light is 'manually controlled'.
  fields:
    entity_id:
      description: "Entity ID of the switch. \U0001F4DD"
      selector:
        entity:
          integration: adaptive_lighting
          domain: switch
          multiple: false
    lights:
      description: "List of light entities to be controlled by Adaptive Lighting (may be empty). \U0001F31F"
      selector:
        entity:
          domain: light
          multiple: true
    manual_control:
      description: "Whether to manually control the lights. \U0001F512"
      example: true
      default: true
      selector:
        boolean: null
change_switch_settings:
  description: Change any settings you'd like in the switch. All options here are the same as in the config flow.
  fields:
    entity_id:
      description: "Entity ID of the switch. \U0001F4DD"
      required: true
      selector:
        entity:
          domain: switch
    use_defaults:
      description: "Whether to use default settings for the switches. \u2699\uFE0F"
      example: current
      required: false
      default: current
      selector:
        select:
          options:
          - current
          - configuration
          - factory
    include_config_in_attributes:
      description: "Show all options as attributes on the switch in Home Assistant when set to `true`. \U0001F4DD"
      required: false
      selector:
        boolean: null
    turn_on_lights:
      description: "Whether to turn on lights if they are off. \U0001F506"
      example: false
      required: false
      selector:
        boolean: null
    initial_transition:
      description: "Duration of the first transition when lights turn from `off` to `on` in seconds. \u23F2\uFE0F"
      example: 1
      required: false
      selector:
        text: null
    sleep_transition:
      description: "Duration of transition when 'sleep mode' is toggled in seconds. \U0001F634"
      example: 1
      required: false
      selector:
        text: null
    max_brightness:
      description: "Maximum brightness percentage. \U0001F4A1"
      required: false
      example: 100
      selector:
        text: null
    max_color_temp:
      description: "Coldest color temperature in Kelvin. \u2744\uFE0F"
      required: false
      example: 5500
      selector:
        text: null
    min_brightness:
      description: "Minimum brightness percentage. \U0001F4A1"
      required: false
      example: 1
      selector:
        text: null
    min_color_temp:
      description: "Warmest color temperature in Kelvin. \U0001F525"
      required: false
      example: 2000
      selector:
        text: null
    only_once:
      description: "Adapt lights only when they are turned on (`true`) or keep adapting them (`false`). \U0001F504"
      example: false
      required: false
      selector:
        boolean: null
    prefer_rgb_color:
      description: "Use RGB color adjustment instead of native light color temperature. \U0001F308"
      required: false
      example: false
      selector:
        boolean: null
    separate_turn_on_commands:
      description: "Use separate `light.turn_on` calls for color and brightness, needed for some light types. \U0001F500"
      required: false
      example: false
      selector:
        boolean: null
    send_split_delay:
      description: "Wait time (milliseconds) between commands when using `separate_turn_on_commands`. Helps ensure correct handling. \u23F2\uFE0F"
      required: false
      example: 0
      selector:
        boolean: null
    sleep_brightness:
      description: "Brightness percentage of lights in sleep mode. \U0001F634"
      required: false
      example: 1
      selector:
        text: null
    sleep_rgb_or_color_temp:
      description: "Use either `'rgb_color'` or `'color_temp'` in sleep mode. \U0001F319"
      required: false
      example: color_temp
      selector:
        select:
          options:
          - rgb_color
          - color_temp
    sleep_rgb_color:
      description: "RGB color in sleep mode (used when `sleep_rgb_or_color_temp` is 'rgb_color'). \U0001F308"
      required: false
      selector:
        color_rgb: null
    sleep_color_temp:
      description: "Color temperature in sleep mode (used when `sleep_rgb_or_color_temp` is `color_temp`) in Kelvin. \U0001F634"
      required: false
      example: 1000
      selector:
        text: null
    sunrise_offset:
      description: "Adjust sunrise time with a positive or negative offset in seconds. \u23F0"
      required: false
      example: 0
      selector:
        number:
          min: 0
          max: 86300
    sunrise_time:
      description: "Set a fixed time (HH:MM:SS) for sunrise. \U0001F305"
      required: false
      example: ''
      selector:
        time: null
    sunset_offset:
      description: "Adjust sunset time with a positive or negative offset in seconds. \u23F0"
      required: false
      example: ''
      selector:
        number:
          min: 0
          max: 86300
    sunset_time:
      description: "Set a fixed time (HH:MM:SS) for sunset. \U0001F307"
      example: ''
      required: false
      selector:
        time: null
    max_sunrise_time:
      description: "Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier real sunrises. \U0001F305"
      example: ''
      required: false
      selector:
        time: null
    min_sunset_time:
      description: "Set the earliest virtual sunset time (HH:MM:SS), allowing for later real sunsets. \U0001F307"
      example: ''
      required: false
      selector:
        time: null
    take_over_control:
      description: "Disable Adaptive Lighting if another source calls `light.turn_on` while lights are on and being adapted. Note that this calls `homeassistant.update_entity` every `interval`! \U0001F512"
      required: false
      example: true
      selector:
        boolean: null
    detect_non_ha_changes:
      description: "Detect non-`light.turn_on` state changes and stop adapting lights. Requires `take_over_control`. \U0001F575\uFE0F"
      required: false
      example: false
      selector:
        boolean: null
    transition:
      description: "Duration of transition when lights change, in seconds. \U0001F551"
      required: false
      example: 45
      selector:
        text: null
    adapt_delay:
      description: "Wait time (seconds) between light turn on and Adaptive Lighting applying changes. Helps avoid flickering. \u23F2\uFE0F"
      required: false
      example: 0
      selector:
        text: null
    autoreset_control_seconds:
      description: "Automatically reset the manual control after a number of seconds. Set to 0 to disable. \u23F2\uFE0F"
      required: false
      example: 0
      selector:
        text: null
