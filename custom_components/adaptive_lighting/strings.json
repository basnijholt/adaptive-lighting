{
  "config": {
    "step": {
      "user": {
        "title": "Choose a name for the Adaptive Lighting instance",
        "description": "Every instance can contain multiple lights!",
        "data": {
          "name": "Name"
        }
      }
    },
    "abort": {
      "already_configured": "[%key:common::config_flow::abort::already_configured_device%]"
    }
  },
  "options": {
    "step": {
      "init": {
        "title": "Adaptive Lighting options",
        "description": "All settings for a Adaptive Lighting component. The option names correspond with the YAML settings. No options are shown if you have this entry defined in YAML.",
        "data": {
          "lights": "lights",
          "initial_transition": "initial_transition: When lights turn 'off' to 'on'. (seconds)",
          "include_config_in_attributes": "include_config_in_attributes: All config options will be listed as attributes under the adaptive-lighting switch this integration creates. (default: false)",
          "sleep_transition": "sleep_transition: When 'sleep_state' changes. (seconds)",
          "interval": "interval: Time between switch updates. (seconds)",
          "max_brightness": "max_brightness: Highest brightness of lights during a cycle. (%)",
          "max_color_temp": "max_color_temp: Coldest hue of the color temperature cycle. (Kelvin)",
          "min_brightness": "min_brightness: Lowest brightness of lights during a cycle. (%)",
          "min_color_temp": "min_color_temp, Warmest hue of the color temperature cycle. (Kelvin)",
          "only_once": "only_once: Only adapt the lights when turning them on.",
          "prefer_rgb_color": "prefer_rgb_color: Use 'rgb_color' rather than 'color_temp' when possible.",
          "separate_turn_on_commands": "separate_turn_on_commands: Separate the commands for each attribute (color, brightness, etc.) in 'light.turn_on' (required for some lights).",
          "send_split_delay": "send_split_delay: wait between commands (milliseconds), when separate_turn_on_commands is used. May ensure that both commands are handled by the bulb correctly.",
          "sleep_brightness": "sleep_brightness, Brightness setting for Sleep Mode. (%)",
          "sleep_rgb_or_color_temp": "sleep_rgb_or_color_temp, use 'rgb_color' or 'color_temp'",
          "sleep_rgb_color": "sleep_rgb_color, in RGB",
          "sleep_color_temp": "sleep_color_temp: Color temperature setting for Sleep Mode. (Kelvin)",
          "sunrise_offset": "sunrise_offset: How long before(-) or after(+) to define the sunrise point of the cycle (+/- seconds)",
          "sunrise_time": "sunrise_time: Manual override of the sunrise time, if 'None', it uses the actual sunrise time at your location (HH:MM:SS)",
          "max_sunrise_time": "max_sunrise_time: Manual override of the maximum sunrise time, if 'None', it uses the actual sunrise time at your location (HH:MM:SS)",
          "sunset_offset": "sunset_offset: How long before(-) or after(+) to define the sunset point of the cycle (+/- seconds)",
          "sunset_time": "sunset_time: Manual override of the sunset time, if 'None', it uses the actual sunset time at your location (HH:MM:SS)",
          "min_sunset_time": "min_sunset_time: Manual override of the minimum sunset time, if 'None', it uses the actual sunset time at your location (HH:MM:SS)",
          "take_over_control": "take_over_control: If anything but Adaptive Lighting calls 'light.turn_on' when a light is already on, stop adapting that light until it (or the switch) toggles off -> on.",
          "detect_non_ha_changes": "detect_non_ha_changes: detects all >10% changes made to the lights (also outside of HA), requires 'take_over_control' to be enabled (calls 'homeassistant.update_entity' every 'interval'!)",
          "transition": "Transition time when applying a change to the lights (seconds)",
          "adapt_delay": "adapt_delay: wait time between light turn on (seconds), and Adaptive Lights applying changes to the light state. May avoid flickering.",
          "lights": "lights: List of light entity_ids to be controlled (may be empty). 🌟",
          "prefer_rgb_color": "prefer_rgb_color: Whether to prefer RGB color adjustment over light color temperature when possible. 🌈",
          "include_config_in_attributes": "include_config_in_attributes: Show all options as attributes on the switch in Home Assistant when set to `true`. 📝",
          "initial_transition": "initial_transition: Duration of the first transition when lights turn from `off` to `on` in seconds. ⏲️",
          "sleep_transition": "sleep_transition: Duration of transition when \"sleep mode\" is toggled in seconds. 😴",
          "transition": "transition: Duration of transition when lights change, in seconds. 🕑",
          "transition_until_sleep": "transition_until_sleep: When enabled, Adaptive Lighting will treat sleep settings as the minimum, transitioning to these values after sunset. 🌙",
          "interval": "interval: Frequency to adapt the lights, in seconds. 🔄",
          "min_brightness": "min_brightness: Minimum brightness percentage. 💡",
          "max_brightness": "max_brightness: Maximum brightness percentage. 💡",
          "min_color_temp": "min_color_temp: Warmest color temperature in Kelvin. 🔥",
          "max_color_temp": "max_color_temp: Coldest color temperature in Kelvin. ❄️",
          "sleep_brightness": "sleep_brightness: Brightness percentage of lights in sleep mode. 😴",
          "sleep_rgb_or_color_temp": "sleep_rgb_or_color_temp: Use either `\"rgb_color\"` or `\"color_temp\"` in sleep mode. 🌙",
          "sleep_color_temp": "sleep_color_temp: Color temperature in sleep mode (used when `sleep_rgb_or_color_temp` is `color_temp`) in Kelvin. 😴",
          "sleep_rgb_color": "sleep_rgb_color: RGB color in sleep mode (used when `sleep_rgb_or_color_temp` is \"rgb_color\"). 🌈",
          "sunrise_time": "sunrise_time: Set a fixed time (HH:MM:SS) for sunrise. 🌅",
          "max_sunrise_time": "max_sunrise_time: Set the latest virtual sunrise time (HH:MM:SS), allowing for earlier real sunrises. 🌅",
          "sunrise_offset": "sunrise_offset: Adjust sunrise time with a positive or negative offset in seconds. ⏰",
          "sunset_time": "sunset_time: Set a fixed time (HH:MM:SS) for sunset. 🌇",
          "min_sunset_time": "min_sunset_time: Set the earliest virtual sunset time (HH:MM:SS), allowing for later real sunsets. 🌇",
          "sunset_offset": "sunset_offset: Adjust sunset time with a positive or negative offset in seconds. ⏰",
          "only_once": "only_once: Adapt lights only when they are turned on (`true`) or keep adapting them (`false`). 🔄",
          "take_over_control": "take_over_control: Disable Adaptive Lighting if another source calls `light.turn_on` while lights are on and being adapted. Note that this calls `homeassistant.update_entity` every `interval`! 🔒",
          "detect_non_ha_changes": "detect_non_ha_changes: Detect non-`light.turn_on` state changes and stop adapting lights. Requires `take_over_control`. 🕵️",
          "separate_turn_on_commands": "separate_turn_on_commands: Use separate `light.turn_on` calls for color and brightness, needed for some light types. 🔀",
          "send_split_delay": "send_split_delay: Delay (ms) between `separate_turn_on_commands` for lights that don't support simultaneous brightness and color setting. ⏲️",
          "adapt_delay": "adapt_delay: Wait time (seconds) between light turn on and Adaptive Lighting applying changes. Might help to avoid flickering. ⏲️",
          "autoreset_control_seconds": "autoreset_control_seconds: Automatically reset the manual control after a number of seconds. Set to 0 to disable. ⏲️",
          "dim to warm": "dim_to_warm: Adjust color temperature even further on a parabolic curve depending on the current brightness of the light. Does not work with take_over_control",
          "dim_to_warm_brightness_check": "dim_to_warm_brightness_check: When true, fire manual control events when dim to warm is true and the brightness is manually controlled."
        }
      }
    },
    "error": {
      "option_error": "Invalid option",
      "entity_missing": "One or more selected light entities are missing from Home Assistant"
    }
  }
}
