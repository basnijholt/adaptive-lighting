{
  "title": "Adaptive Lighting",
  "config": {
    "step": {
      "user": {
        "title": "Choose a name for the Adaptive Lighting instance",
        "description": "Pick a name for this instance. You can run several instances of Adaptive lighting, each of these can contain multiple lights!",
        "data": {
          "name": "Name"
        }
      }
    },
    "abort": {
      "already_configured": "This device is already configured"
    }
  },
  "options": {
    "step": {
      "init": {
        "title": "Adaptive Lighting options",
        "description": "All settings for a Adaptive Lighting component. The option names correspond with the YAML settings. No options are shown if you have the adaptive_lighting entry defined in your YAML configuration.",
        "data": {
          "lights": "lights",
          "initial_transition": "initial_transition: When lights turn 'off' to 'on'. (seconds)",
          "sleep_transition": "sleep_transition: When 'sleep_state' changes. (seconds)",
          "interval": "interval: Time between switch updates. (seconds)",
          "max_brightness": "max_brightness: Highest brightness of lights during a cycle. (%)",
          "max_color_temp": "max_color_temp: Coldest hue of the color temperature cycle. (Kelvin)",
          "min_brightness": "min_brightness: Lowest brightness of lights during a cycle. (%)",
          "min_color_temp": "min_color_temp, Warmest hue of the color temperature cycle. (Kelvin)",
          "only_once": "only_once: Only adapt the lights when turning them on.",
          "prefer_rgb_color": "prefer_rgb_color: Use 'rgb_color' rather than 'color_temp' when possible.",
          "separate_turn_on_commands": "separate_turn_on_commands: Separate the commands for each attribute (color, brightness, etc.) in 'light.turn_on' (required for some lights).",
          "send_split_delay": "send_split_delay: wait between commands (milliseconds), when separate_turn_on_commands is used. May ensure that both commands are handled by the bulb correctly.",
          "sleep_brightness": "sleep_brightness, Brightness setting for Sleep Mode. (%)",
          "sleep_rgb_or_color_temp": "sleep_rgb_or_color_temp, use 'rgb_color' or 'color_temp'",
          "sleep_rgb_color": "sleep_rgb_color, in RGB",
          "sleep_color_temp": "sleep_color_temp: Color temperature setting for Sleep Mode. (Kelvin)",
          "sunrise_offset": "sunrise_offset: How long before(-) or after(+) to define the sunrise point of the cycle (+/- seconds)",
          "sunrise_time": "sunrise_time: Manual override of the sunrise time, if 'None', it uses the actual sunrise time at your location (HH:MM:SS)",
          "max_sunrise_time": "max_sunrise_time: Manual override of the maximum sunrise time, if 'None', it uses the actual sunrise time at your location (HH:MM:SS)",
          "sunset_offset": "sunset_offset: How long before(-) or after(+) to define the sunset point of the cycle (+/- seconds)",
          "sunset_time": "sunset_time: Manual override of the sunset time, if 'None', it uses the actual sunrise time at your location (HH:MM:SS)",
          "min_sunset_time": "min_sunset_time: Manual override of the minimum sunset time, if 'None', it uses the actual sunset time at your location (HH:MM:SS)",
          "take_over_control": "take_over_control: If anything but Adaptive Lighting calls 'light.turn_on' when a light is already on, stop adapting that light until it (or the switch) toggles off -> on.",
          "detect_non_ha_changes": "detect_non_ha_changes: detects all >10% changes made to the lights (also outside of HA), requires 'take_over_control' to be enabled (calls 'homeassistant.update_entity' every 'interval'!)",
          "transition": "Transition time when applying a change to the lights (seconds)",
          "adapt_delay": "adapt_delay: wait time between light turn on (seconds), and Adaptive Lights applying changes to the light state. May avoid flickering."
        }
      }
    },
    "error": {
      "option_error": "Invalid option",
      "entity_missing": "One or more selected light entities are missing from Home Assistant"
    }
  }
}
